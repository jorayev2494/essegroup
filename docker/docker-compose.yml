version: '3.9'

x-php-cli: &php-cli
    build:
        context: ./php_cli
        dockerfile: Dockerfile
    # restart: unless-stopped
    working_dir: /var/project
    volumes:
        - ../:/var/project

services:
    # Nginx Service
    nginx:
        build:
            context:  ./nginx
            dockerfile: Dockerfile
        container_name: ${COMPOSE_PROJECT_NAME}-nginx
        restart: unless-stopped
        tty: true
        volumes:
            - ../:/var/project
        ports:
            - ${NGINX_PORT}:80
        networks:
            - essegroup

    # PHP Service
    php-fpm:
        build:
            context: ./php
            dockerfile: Dockerfile
        container_name: ${COMPOSE_PROJECT_NAME}-php-fpm
        restart: unless-stopped
        tty: true
        volumes:
            - ../:/var/project
        depends_on:
            - postgres
        networks:
            - essegroup

    # PHP CLI Service
    php-cli:
        <<: *php-cli
        container_name: ${COMPOSE_PROJECT_NAME}-php-cli
        restart: 'no'
        # depends_on:
        # - test-postgres
        networks:
            - essegroup

    # Postgres Service
#    postgres:
#        image: postgres:15-alpine
#        container_name: ${COMPOSE_PROJECT_NAME}-postgres
#        restart: unless-stopped
#        volumes:
#            - ./postgres/multiple-databases.sh:/docker-entrypoint-initdb.d/multiple-databases.sh
#            - ./postgres/data/:/var/lib/postgresql/data
#        environment:
#            POSTGRES_MULTIPLE_DATABASES: admindatabase, clientdatabase
#            POSTGRES_USER: essegroupuser
#            POSTGRES_PASSWORD: essegrouppassword
#            PGDATA: /var/lib/postgresql/data/pgdata
#        healthcheck:
#            test: [ "CMD-SHELL", "pg_isready -U essegroupuser" ]
#            interval: 5s
#            timeout: 5s
#            retries: 5
#        ports:
#            - ${POSTGRES_PORT}:5432
#        networks:
#            - essegroup

    postgres:
        image: postgres:15-alpine
        container_name: ${COMPOSE_PROJECT_NAME}-postgres
        restart: unless-stopped
        volumes:
            - ./postgres/multiple-databases.sh:/docker-entrypoint-initdb.d/multiple-databases.sh
            - ./postgres/data/:/var/lib/postgresql/data
        environment:
            # POSTGRES_DB: devdb
            POSTGRES_MULTIPLE_DATABASES: admindatabase, clientdatabase
            POSTGRES_USER: essegroupuser
            POSTGRES_PASSWORD: "essegrouppassword"
            PGDATA: /var/lib/postgresql/data/pgdata
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -U essegroupuser" ]
            interval: 5s
            timeout: 5s
            retries: 5
        command: postgres -c 'max_connections=1000'
        ports:
            - ${POSTGRES_PORT}:5432
        networks:
            - essegroup

    # Mailhog Service
    mailhog:
        image: mailhog/mailhog:latest
        container_name: ${COMPOSE_PROJECT_NAME}-mailhog
        restart: unless-stopped
        depends_on:
            - php-fpm
        ports:
            - ${MAILHOG_INTERFACE_PORT}:8025
        networks:
            - essegroup

    adminer:
        image: adminer
        restart: unless-stopped
        container_name: ${COMPOSE_PROJECT_NAME}-adminer
        ports:
            - 8000:8080
        environment:
            - ADMINER_DEFAULT_SERVER=postgres
            - ADMINER_DESIGN='nette'
        networks:
            - essegroup

networks:
    essegroup:
        driver: bridge
