version: '3.9'

x-php-cli: &php-cli
    build:
        context: ./php_cli
        dockerfile: Dockerfile
    # restart: unless-stopped
    working_dir: /var/project
    volumes:
        - ../:/var/project

services:
    # Nginx Service
    nginx:
        build:
            context:  ./nginx
            dockerfile: Dockerfile
        container_name: ${COMPOSE_PROJECT_NAME}-nginx
        restart: unless-stopped
        tty: true
        volumes:
            - ../:/var/project
        ports:
            - ${NGINX_PORT}:80
        networks:
            - essegroup

    # PHP Service
    php-fpm:
        build:
            context: ./php
            dockerfile: Dockerfile
        container_name: ${COMPOSE_PROJECT_NAME}-php-fpm
        restart: unless-stopped
        tty: true
        volumes:
            - ../:/var/project
        depends_on:
            - mysql
        networks:
            - essegroup

    # PHP CLI Service
    php-cli:
        <<: *php-cli
        container_name: ${COMPOSE_PROJECT_NAME}-php-cli
        restart: 'no'
        # depends_on:
        # - test-postgres
        networks:
            - essegroup

    # Postgres Service
#    postgres:
#        image: postgres:15-alpine
#        container_name: ${COMPOSE_PROJECT_NAME}-postgres
#        restart: unless-stopped
#        volumes:
#            - ./postgres/multiple-databases.sh:/docker-entrypoint-initdb.d/multiple-databases.sh
#            - ./postgres/data/:/var/lib/postgresql/data
#        environment:
#            POSTGRES_MULTIPLE_DATABASES: admindatabase, clientdatabase
#            POSTGRES_USER: essegroupuser
#            POSTGRES_PASSWORD: essegrouppassword
#            PGDATA: /var/lib/postgresql/data/pgdata
#        healthcheck:
#            test: [ "CMD-SHELL", "pg_isready -U essegroupuser" ]
#            interval: 5s
#            timeout: 5s
#            retries: 5
#        ports:
#            - ${POSTGRES_PORT}:5432
#        networks:
#            - essegroup

#    postgres:
#        image: postgres:15-alpine
#        container_name: ${COMPOSE_PROJECT_NAME}-postgres
#        restart: unless-stopped
#        volumes:
#            - ./postgres/multiple-databases.sh:/docker-entrypoint-initdb.d/multiple-databases.sh
#            - ./postgres/data/:/var/lib/postgresql/data
#        environment:
#            # POSTGRES_DB: devdb
#            POSTGRES_MULTIPLE_DATABASES: admindatabase, companydatabase, clientdatabase
#            POSTGRES_USER: essegroupuser
#            POSTGRES_PASSWORD: "essegrouppassword"
#            PGDATA: /var/lib/postgresql/data/pgdata
#        healthcheck:
#            test: [ "CMD-SHELL", "pg_isready -U essegroupuser" ]
#            interval: 5s
#            timeout: 5s
#            retries: 5
#        command: postgres -c 'max_connections=1000'
#        ports:
#            - ${POSTGRES_PORT}:5432
#        networks:
#            - essegroup

    # Database Service
    mysql:
        image: mysql:8.0
        container_name: ${COMPOSE_PROJECT_NAME}-mysql
        ports:
            - ${MYSQL_PORT}:3306
        volumes:
            - ./mysql/data:/var/lib/mysql
        environment:
            # - MYSQL_DATABASE=${COMPOSE_PROJECT_NAME}
            - MYSQL_USER=esseelitegroup
            - MYSQL_PASSWORD=esseelitegrouppassword
            - MYSQL_ROOT_PASSWORD=rootpassword
#        entrypoint:
#            sh -c "
#                echo 'CREATE DATABASE IF NOT EXISTS admindatabase; GRANT ALL PRIVILEGES ON firstSchema.* TO '\''esseelitegroup'\''@'\''%'\''; ' > /docker-entrypoint-initdb.d/init.sql;
#                echo 'CREATE DATABASE IF NOT EXISTS companydatabase; GRANT ALL PRIVILEGES ON secondSchema.* TO '\''esseelitegroup'\''@'\''%'\''; ' >> /docker-entrypoint-initdb.d/init.sql;
#                /usr/local/bin/docker-entrypoint.sh --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --default-authentication-plugin=mysql_native_password
#            "
        networks:
            - essegroup


    # Mailhog Service
    mailhog:
        image: mailhog/mailhog:latest
        container_name: ${COMPOSE_PROJECT_NAME}-mailhog
        restart: unless-stopped
        depends_on:
            - php-fpm
        ports:
            - ${MAILHOG_INTERFACE_PORT}:8025
        networks:
            - essegroup

    # Redis Service
    redis:
        image: redis:alpine
        container_name: ${COMPOSE_PROJECT_NAME}-redis
        restart: unless-stopped
        ports:
            - ${REDIS_PORT}:6379
        volumes:
            - ./redis/data:/data
        healthcheck:
            test: ['CMD', 'redis-cli', 'ping']
            retries: 3
            timeout: 5s
        networks:
            - essegroup

networks:
    essegroup:
        driver: bridge
