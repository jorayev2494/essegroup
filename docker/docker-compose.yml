version: '3.9'

x-php-cli: &php-cli
    build:
        context: ./php_cli
        dockerfile: Dockerfile
        target: ${PHP_CLI_BUILD_TARGET:-${BUILD_TARGET?Build mode php-cli}}
    # restart: unless-stopped
    working_dir: /var/project
    volumes:
        - ../:/var/project

x-ngx-proxy: &ngx-proxy-server
    build:
        context: ./nginx_proxy
        dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME}-ngx-proxy
    restart: unless-stopped
    volumes:
        - ../:/var/project

services:
    # Nginx Service
    nginx:
        build:
            context:  ./nginx
            dockerfile: Dockerfile
        container_name: ${COMPOSE_PROJECT_NAME?Not project name}-nginx
        restart: unless-stopped
        tty: true
        volumes:
            - ../:/var/project
        ports:
            - ${NGINX_PORT?Not nginx port}:80
        networks:
            - essegroup

    # PHP Service
    php-fpm:
        build:
            context: ./php
            dockerfile: Dockerfile
            target: ${PHP_FPM_BUILD_TARGET:-${BUILD_TARGET?Build mode php-fpm}}
        container_name: ${COMPOSE_PROJECT_NAME?Not project name}-php-fpm
        restart: unless-stopped
        tty: true
        volumes:
            - ../:/var/project
        depends_on:
            - mysql
        networks:
            - essegroup

    # PHP CLI Service
    php-cli:
        <<: *php-cli
        container_name: ${COMPOSE_PROJECT_NAME?Not project name}-php-cli
        restart: no
        networks:
            - essegroup

    # Database Service
    mysql:
        image: mysql:8.0
        container_name: ${COMPOSE_PROJECT_NAME?Not project name}-mysql
        ports:
            - ${MYSQL_SERVICE_PORT?Not mysql port}:3306
        env_file:
            -   ./mysql/.env
        volumes:
            - ./mysql/data:/var/lib/mysql
        networks:
            - essegroup

    # Mailhog Service
    mailhog:
        image: mailhog/mailhog:latest
        container_name: ${COMPOSE_PROJECT_NAME?Not project name}-mailhog
        restart: unless-stopped
        depends_on:
            - php-fpm
        ports:
            - ${MAILHOG_INTERFACE_PORT?Not mailhog port}:8025
        networks:
            - essegroup

    # Redis Service
    redis:
        image: redis:alpine
        container_name: ${COMPOSE_PROJECT_NAME?Not project name}-redis
        restart: unless-stopped
        ports:
            - ${REDIS_PORT?Not redis port}:6379
        volumes:
            - ./redis/data:/data
        healthcheck:
            test: ['CMD', 'redis-cli', 'ping']
            retries: 3
            timeout: 5s
        networks:
            - essegroup

    # Redis Minio
    # https://github.com/amincheloh/cookbook/blob/master/docs/how-to-use-minio-as-laravel-file-storage.md
    minio:
         hostname: minio
         image: minio/minio
         # image: minio/minio:RELEASE.2024-01-18T22-51-28Z-cpuv1
         command: server /data --console-address :9001
         container_name: ${COMPOSE_PROJECT_NAME?Not project name}-minio
         environment:
             MINIO_ROOT_USER: minio
             MINIO_ROOT_PASSWORD: minio123
         healthcheck:
             test: [ 'CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live' ]
             interval: 30s
             timeout: 20s
             retries: 3
         volumes:
             - ./minio/data:/data
         ports:
             - ${MINIO_PORT}:9000
             - ${MINIO_WEB_INTERFACE_PORT}:9001
         networks:
             - essegroup

    centrifugo:
        image: centrifugo/centrifugo:v5
        restart: unless-stopped
        container_name: ${COMPOSE_PROJECT_NAME?Not project name}-centrifugo
        ports:
            - 8000:8000
            - 8899:8000
        volumes:
            - ./centrifugo/configs:/centrifugo
        command: centrifugo -c config.json
        ulimits:
            nofile:
                soft: 65535
                hard: 65535
        networks:
            - essegroup

    # Redis Adminer
    # adminer:
    #     image: adminer
    #     restart: unless-stopped
    #     container_name: ${COMPOSE_PROJECT_NAME?Not project name}-adminer
    #     ports:
    #         - 8000:8080
    #     environment:
    #         - ADMINER_DEFAULT_SERVER=mysql
    #         - ADMINER_DESIGN='nette'
    #     networks:
    #         - essegroup

networks:
    essegroup:
        driver: bridge
